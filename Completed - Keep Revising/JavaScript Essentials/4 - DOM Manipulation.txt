Understanding the Document Object Model:

- DOM is a representative of HTML nodes
- document is attached to window Object
- document contains all the information of the HTML
    - It also contains the tree structure of HTML (Nodes -> Childnodes)
    - body -> childNodes [NodeList], URI, and a bunch of functions
- document.childNodes[1].childNodes[2] is not a convenient way to access
    dom structure
- Better to use CSS selectors

----------------

Targeting DOM Elements:

- Adding new elements will change the structure of the document (childNode)
    locations in the array
- document is global, just like window
- To fetch a certain element there are certain functions (methods):
    - document.getElementbyId()
    - document.getElementbyName | byClassName | byTagName | byTagNameNS
        (NameSpaced)
    - e.g: document.getElementsbyTagName('p') -> will return paragraph elements
        in an array [p]
    - document.getElementbyId('hello') -> will print the entire HTML
    - <p id="hello">hello world</p>
    - dir ( document.getElementbyId('hello')) -> will get object p#hello
    
- Using CSS selectors:
    - document.querySelectorAll ( '#hello' ) -> returns [p#hello]
        Will always return array
    - document.querySelectorAll ('#hello, .pClass')
- Advanced Query Selector:
    - document.querySelectorAll('p[data-content="123"], 
        body > h1.pClass > span')
    - select paragraph with attribute data-content having the value 123
    - also select span inside h1.pClass inside body

----------------

Changing Element's Contents:

- Location of script should be at bottom, because it will slow loading
    if placed first, and also script should be ready after all the elements
    have loaded, else you will have to program the script to wait for loading elements

- console.dir(domElement) will display the object
- var pHello = document.getElementById('hello');
    - now pHello.innerText is simple to access
- innerText vs innerHTML
    - innerText will only place text
    - innerHTML will parse html tags to process the values accordingly
- outerHTML: will show the exact text as compared to innerHTML which will not show tags

var spanH1 = document.querySelectorAll('h1 span');
spanH1[0].innerHTML = "new text here!!";
- Note that spanH1.innerHTML will create new symbol on window (so watch for []);

----------------

Changing Element's Style:

var el = document.getElementById('style');

// el.style.color = "white";
// el.style.width = "200px";

// This can also be done:

el.style.cssText = "background : blue; color : white; width:200px; height:100px";

Note: getComputedStyle(element)
    Returns all the applied styles to an element, highly useful for odd scenarios

JS changes the styles via style attribute, its not computed as compared to css styles and browser defaults
- Style attributes take precendence over computed CSS

-----------------

Event Handlers:

- Can trigger functions, subroutines, etc...
- Event -> Trigger -> function
- check the symbol's methods -> on<action> can be attached to an HTML element

    <select name="cars" onclick="console.log('Clicked on Select')">
        <option value="volvo">Volvo</option>
        <option value="saab">Sabro</option>
        <option value="fiat">Fiat</option>
        <option value="audi">Audi</option>

    </select>

- Possible to do it in HTML, but not a good practice

var select = document.getElementsByName('cars')[0];
select.onclick = function (event) {
    console.log('Kill ThiS THING LIVE!');
}
- This function takes an argument of event 
    - event contains multiple information attributes, including path (Array)
        - path shows (from 0 to x-index) [currentTag, previous,..., document, window]

- <tag>.on<action> will overwrite any other method of the same name
- To add multiple functions to the same event, Use: addEventListener

select.addEventListener('click', function (event) {
    console.log('Inside Event Listener')
});

- Currently the function is anonymous
- Referenced Functions on EvenListeners:
    
function ClickCallbackFunction(event) {
    console.log('HELLOO!!');
};
select.addEventListener('click', ClickCallbackFunction);
select.removeEventListener('click', ClickCallbackFunction);

---------------

Create & appendChild & insertBefore Methods:

- create a custom element from JS : var element = document.createElement('div');
- add the element in a certain location: document.body.appendChild( element );
    - Furthermore: 
        var target = document.getElementById('yellow');
        document.body.insertBefore(element, target);

---------------

Final Project:

 document.getElementById('set').addEventListener('click', function () {
    for (let index = 0, elements = document.getElementsByName('cssProperty'); index < elements.length; index++) {
        document.getElementById('modify').style[elements[index].getAttribute('id')] = elements[index].value;
    }
});


