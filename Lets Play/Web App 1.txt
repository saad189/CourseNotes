Full Stack Website -> FOLLOW BEST PRACTICES (Useless if Not Followed, as it is the purpose to learn)

Platforms:
- Angular
- .NetCore
- MySQL
-----------------

Initial Plan:
- Pre-built APIs
- Monolithic with the possibility of multiple Deployments
- Docker Integration
- Foreign API attachment
- Swagger Integration
- Single Page Application
- File Storage


Middle Plan:
- Tokenization or Something Similar
- Encryption-Decryption
- Lazy Loading [Modules]
- Dynamic WebPages

Future Plan:
- Integrate with Google Cloud to send files etc.
- SDK
- Microservice
- No-SQL db Integraiton
- TimeSeries Integration

UltraFuture Plan:
- Unit Tests [NUnit]

------------------

Features:
- UI/UX (Initially Basic)
- View Stats, Fetch and Update
- Profile Making
- Basic Calculator -> Front-End, Data Saving backend
- Credit Card Integration
- Basic TicTacToe Game
- MiniGames -> MiniAlgorithms in Tabs
- User SCORE PROFILE BASED ON GAMES | A GAME WEBSITE with extra features

--------------------

Plan:
- Make Backend -> DB Design -> Code Design -> Open for Upgradability(Extension)
- Deployable to Docker
- Dashboard [Contains Quick Status]
- Profile [Person + Player]
- Games
- Extra Services
- About
- Player Report (Game + Overall)
- Cache
- Pagination
- Animations, ETC


Sprint 1: (2 Weeks) Perhaps Use Trello [12 April]
- Set Github [done]
- Setup LocalDB (With Option for Remote DB)
- Design DB
	- Basic Person -> Player
	- Player Statistics, by game? or by player, interesting
	- Game Storage logic
	- Account Management
	- Card Info?
- SetUp Base Architecture [Frontend + Backend]
	FrontEnd:
		- Build Project [Base Tabs etc -> Empty Texts, but Routable]
		- Folder Structure [done]
		- Send and Receive a Simple Call to Backend
	BackEnd:
		- Monolithic Folder Structure [done]
		- Review Alfa Laval Architecture
		- Build Basic API to Communicate with FrontEnd

Sprint 2:


