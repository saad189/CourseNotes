Services:

Principles of Programing: (to name a few)
1. DRY (Do Not Repeat Yourself):
2. Single Responsibility Principle

- Why Use a Service:
1. Share Data among components
2. Implement Application Logic (e.g calculate employee age via DOB)
3. External Interactions (API/DB)

Naming convention in Angular : .service.ts

-------------------------

Dependancy Injection:

How to use Service:
- via Dependancy Injection (DI)
- without DI, the code is no longer flexible
    - Dependancy change will require the dependants to be changed
    - Not suitable for testing either
    - Layers of Dependancy are also an issue

DI as a design pattern:
- DI is a coding pattern in which a class receives its dependancies from
    external sources rather than creating them itself.

DI:
    class Car {
        engine;
        tires;
        constructor(engine,tires){
          this.engine = engine;
          this.tires = tires  
        }
    }
    var myEngine = new Engine();
    var myTires = new Tires();
    var myCar = new Car(myEngine,myTires);

- DI enables Unit Testing as well (any paramater can be used now);

DI as a framework:
- Can become hectic to keep track of all dependancies
- Angular has an injector to register all dependancies
    - resolves manual tracking issue

Angular Methodlogy to Declare a Service:

1. Define the <Service> class
2. Register with Injector (Built In)
3. Declare as a dependancy in components

-------------------

Using a Service:

1. Declear the Service
2. Note -> Angular has hiearchical DI system, so registering the service
    should be done accordinly
3. Services can be registered with a component, but it is better to register
    it with a module
    - Add a service to providers for DI (registers it with Injector)
4. In the component, add it to the constructor

- @Injectable() decorator:
    - This service might itself have injected dependancies
    - Required for a service

------------------

Http and Observables:

- Service in FrontEnd will send a GET request and will receive response,
    which is packaged in an Observable.

Observable: 
- Sequence of Items that arrive asynchronously over time
- HTTP call - Single Item - Http response
- The Process:
    - GET Request from the Service
    - Receive Observable, Cast it to requried Object-Array
    - Subscribe to Observable from component
    - Assign the Object-Array to Local Variable

RxJS:
- Reactive Extensions for JavaScript
- External Library to work with Observables

-----------------

Fetch data using HTTP:
- Import HttpClientModule
- this.http.get(url);
- this.testService.getEmployees().subscribe(data => this.employeeList = data);

-----------------

Http Error Handling:

-  return this.http.get<IEmployee[]>(this.url).pipe(catchError(this.errorHandler));
  errorHandler(errorValue: HttpErrorResponse) {
    console.log('Caught Error', errorValue);
    return Observable.throw(errorValue.headers);
  }

------------------

