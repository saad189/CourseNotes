Getting Started:
- HTML, CSS and JS -> TS
- Install Node
- Install Angualr CLI : npm install -g @angular/CLI
    - check version: ng -v
- Create new angular project: ng new <app-name>
- Run the app with available command: ng serve

-----------

Hello World:

- Architecture:
    1. Module (Modular in Nature)
        - e.g UserModule, AdminModule
        - Can be imported and exported
        - Starts with Route Module -> App Module
    2. Component (Contained Inside the Module)
        - Class with @Component Directivee
        - *********Component*********
        - *C    
        - *O
        - *M
        - *P
        - *O*******Component*********
        - *N
        - *E
        - *N
        - *T
        - Starts with Root Component (AppComponent)
        - Other Components will be nested inside root component
        - Component = HTML + CSS + Class
    3. Service (Contained inside Module)

- Angular => Module [Component + Service]

- Files inside Angular:
    - package.json [dependencies] => npm install
        - scripts => custom commands

    - src/main.ts -> JS entry point
        - platformBrowserDynamic().bootstrapModule(AppModule)
            .catch(err => console.error(err));
        - This will attach the root module (AppModule) to be kickstarted
            on compilation

    - app.module.ts -> Root module
        -   bootstrap: [AppComponent]
        - This kicstarts the root Component

    - app.component.ts -> Root Component
        - Contains class for code, html for view, 
            css for visual improvement

----------------------

Components:

Parts:
1. Template [View -> Html]
2. Class [Code -> TS][Data & Methods][Logic]
3. Metadata [Information][Decorator]
    - @Component({})

- Create component: ng g c <component-name>
    - Add component into the 'declaration' array of the module
- Note that if you chanage selector from 'app-<name>' to '.app-<name>'
    it can be included as a class in a div to generate that component
    e.g <div class = "app-test"></div>
- Note that selector: '[app-<name>]' -> <div app-<name>> -> <div app-test></div>
- Style and template can be written Inline : change templateUrls to template

-----------------

Interporlation: {{variable}}

- class to template -> {{variable}}
- Interporlation also processes expressions {{2*2}} = 4
- May generate template parse error
- cannot directly fetch 'window' object in {{}}, can be bound to local and fetched

------------------

Property Binding:

- HTML attribute vs DOM attribute

- HTML attribute -> <input type="text" value="saad">
    - accessible in HTML as $0.value -> $0.getAttribute('value');

- Note: changing the value in the text field ->
    - Changes the DOM property value and not attribute value

Attribute vs Property:
- Attribute -> HTML | Properties -> DOM (Document Object Model)
- Attributes initialize DOM properties and then they are done. Attribute
    values cannot change once they are initialized
    Property values can change

- Biding is done to the DOM property not HTML attribute

NOTE:
<input [id]="myId" type = "text" value = "Saad"> #PropertyBinding
<input id="{{myId}}" type = "text" value = "Saad"> #InterpolationBinding

- Interpolation binding only works for string values
- PropertyBinding works with any datatype

- <input disabled> will make the input disabled
- <input disabled = "false"> will not work (still disabled)
- <input [disabled] ="false"> will enable the input

- Another method: <input bind-disabled = "isDisabled">, will do property 
    binding

-----------------

Class Binding:
- class = "actual-class"
- [class] = "someVar" | "actual-class"
- [class] will over-write normal class binding
- [class.text-danger] = "hasError" (Single Class)

- Multiple Class application:
    messageClasses = {
        "text-success": !this.hasError.
        "text-danger": this.hasError,
        "text-special": this.isSpecial
    }
    - <div [ngClass] = "messageClasses"></div>

------------------

Style Binding:

- <h2 [style.color]="'orange'">Value</h2>
- <h2 [style.color]="hasError ? 'red' : 'green'">Binding</h2>

- Multiple Style Application:
    - titleStyles = {
        color: "blue",
        fontStyle: "italic"
    }
    - <h2 [ngStyle] = "titleStyles">Values</h2>

-------------------

Binding:

- Data Binding : Class ==> Template
- Event Binding : Class <== Template

- e.g (click)="methodInComponent(args?)"
- Info about the event itself:
    - (click)="method($event)" -> Info about the DOM event sent to method
- code can be directly written into Event handler statment
    - (click)="console.log('Hello');"

-------------------

Template Reference Variable:

- Data transfer from view to class

<input #myInput type="text">
<button (click)="logMessage(myInput.value)">Click</button>
- Here myInput -> <input type="text"> (HTML attribute)

-------------------

Two Way Binding:

- Template <==> Class
- Ensure Model and View to be in sync
- <input [(ngModel)] = "nameVar" type="text">
    - [()] : Banana in a Box
- [] -> Property Binding (Class to Template)
- () -> Event Binding (Tempalte to Class)
- Note: To run ngModel, import FormsModule into relevant Module












