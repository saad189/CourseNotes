Listening to Events and Working with Event Handlers:

- HTML Button Element -> Mozilla article on Button
    [HTMLButtonElement -> HTMLElement -> Element -> Node -> EventTarget]

- All Events have a Prop Equivalent in React
- As opposed to document.getElementById('#id').addEventListener(()=> {});

-       <button onClick={clickFunction}>Change Title</button>
-       <button onClick={()=> {console.log('Clicked!')}}>Change Title</button>
- For Defined functions, only point to the function (eg. -> functionName and not functionName())
- using (), would call the function when JSX is being parsed.

- Function Convention: 'prop'Handler [clickHandler]

----------------------------------

How Component Functions are Executed:

React JSX parsing:
- Component is a function that returns JSX
- Function processing is done at render, and only once
- Since rendering is only done once, the view cannot be changed
- For that the concept of 'State' is introduced.

-----------------------------------

Working with a STATE:
- One of the React Hook [use'Hook']
- Can only be called in the main Component Function (except one)
- import React, { useState } from 'react';
- Allows values as states, allowing for re-rendering of said value

- let [variable,function] = useState(defaultValue);
- returns array with variable and update function.

//
  let [newTitle, setTitle] = useState(title); // Default Value of useState Hook

  const clickHandler = () => {
    setTitle("Updated");
  };
//

- State Update function will update the entire Component, not just the variable
- Calling setTitle() will delay the change of the variable. (old value will take some time to be updated)

-------------------------------------

A Closer Look at the useState Hook:

- useState registers some variable for a component Instance
- update (via useState) -> re-render -> get the latest value
- First Value (default value) is only considered on intial render

-------------------------------------

Multiple ways to Update the State:
- setTimeOut()
- HttpRespense
- etc...

-------------------------------------

Adding Form Inputs:

- Created New Component
- Added <form> and relvant Input tags

//
const ExpenseForm = () => {
  return (
    <form>
      <div className="new-expense__controls">
        <div className="new-expense__control">
          <label>Title</label>
          <input type="text" />
        </div>

        <div className="new-expense__control">
          <label>Amount</label>
          <input type="number" min="0.01" step="0.01" />
        </div>

        <div className="new-expense__control">
          <label>Date</label>
          <input type="date" min="2022-01-01" max="2024-12-31" />
        </div>
      </div>

      <div className="new-expense__actions">
        <button type="submit">Add Expense</button>
      </div>
    </form>
  );
};
//

---------------------------------------


Listening to User Input:
- Need to add listeners to the elements (e.g for Input)
- Fetching Value from Input:
  - event.target.value
  -  <input type="text" onChange={titleChangeHandler} />

const titleChangeHandler = (event) => {
    console.log("Title Changed", event.target.value);
};


---------------------------------------

Working with Multiple States:

- Just useState multiple times for each input instance

---------------------------------------

Using One State Instead (What's Better):

- Approach Preference is personal
- 

  //   const [enteredTitle, setEnteredTitle] = useState("");
  //   const [enteredAmount, setEnteredAmount] = useState(0.01);
  //   const [enteredDate, setEnteredDate] = useState("2022-01-01");

vs


  const [userInput, setUserInput] = useState({
    enteredTitle: "",
    enteredAmount: "",
    enteredDate: "",
  });

   setUserInput({
      enteredTitle: event.target.value,
      ...userInput,
    });

----------------------------------------

Updating State That Depends On The Previous State:

- The Problem with single state:
  - constant copying of other properties
- When updating a state, and you depend on a previous state, then use:
  function, rather than spread copying:

- Note: React Schedules updates, (async) not at once, so use:
  //
    setUserInput((prevState) => {
      return {
        ...prevState,
        enteredTitle: event.target.value,
      };
    });
  //
- Function call is sync safe, as it will ensure latest state snapshot of the values

----------------------------------------

Handling Form Submission:

- If button of type 'submit' is present in a 'form', then the form will emit the event
- Form Also Submits to the server, need to disable the default behavior (this reloads the page)

//
  const submitHandler = (event) => {
    console.log("LOL");

    event.preventDefault();
  };
//

- Then build the Data Object:
      const expenseData = {
      title: enteredTitle,
      amount: enteredAmount,
      date: new Date(enteredDate),
    };

--------------------------------------

Two-Way Binding:
- One way of state persistance is using global variables
- Two-Way binding is basically reading and writing a property attached to an element

//
  <input
    type="text"
    value={enteredTitle}
    onChange={titleChangeHandler}
  />
//

- Reset Form after Submission
  const resetForm = () => {
    setEnteredTitle(defaultValue);
    setEnteredAmount(defaultValue);
    setEnteredDate(defaultValue);
  };

---------------------------------------






