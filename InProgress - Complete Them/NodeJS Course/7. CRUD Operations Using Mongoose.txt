
- Document database, NoSQL database
- MongoDB

-------

Installing MongoDB:

- Install MongoDB
- Install MongoDB Compass
    - Connect to localhost

--------------

Connecting to MongoDB:

- Install Mongoose

const mongoose = require("mongoose");
const db = mongoose
  .connect("mongodb://localhost/playground")

--------------

Schemas:

- Database: database
- Table: collection
- Row/Record: Document

- Mongoose Schema -> Shape of Documents is defined here

new mongoose.Schema({
  name: String,
  author: String,
  tags: [String],
  date: { type: Date, default: Date.now },
  isPublished: Boolean,
});

Schema Types:
- String
- Number
- Date
- Buffer
- Boolean
- ObjectID
- Array


--------------

Models:

// Schema to Model
// (collection, document)
// Pascal Case -> Class
const Course = mongoose.model("Course", courseSchema);

// camelCase -> Object

const course = new Course({
  name: "Node.js Course",
  author: "Most",
  tags: ["node", "backend"],
  isPublished: true,
});

--------------

Saving a Document:

- document.save();

async function createCourse() {
  const course = new Course({
    name: "Angular Course",
    author: "Mosh",
    tags: ["angular", "frontend"],
    isPublished: true,
  });

  const result = await course.save();
  console.log(result);
}

createCourse();

--------------

Querying Documents:

async function getCourses() {
  const courses = await Course.find({
    isPublished: true,
  })
    .limit(10)
    .sort({ name: 1 })
    .select({ name: 1, tags: 1 }); //1 == ascending, -1 == descending
  console.log(courses);
}

getCourses();


--------------

Comparison Query Operators:

- MongoDB operators, available in mongoose
- eq (equal)
- ne (not equal)
- gt (greater than)
- gte (greater than or equal to)
- lt 
- lte 
- in
- nin (not in)


async function getQueriedCourses() {
  const course = await Course.find({
    price: { $in: [10, 15, 20] },
  });
}

---------------

Logic Query Operators:

- or
- and

async function getLogicQueriedCourses() {
  const course = await Course.find()
    .or([{ author: "/^Mos/" }, { isPublished: true }])
    .select({ name: 1 });
  console.log(course);
}

---------------

Regular Expressions:

async function getLogicQueriedCourses() {
  const course = await Course.find()
    .or([{ author: "/^Mos/" }, { isPublished: true }])
    .select({ name: 1 });
  console.log(course);
}

- /pattern/
- Starts With: /^Pattern/
- Ends With: /Pattern$/
- Case Insensitive: /Pattern$/i
- Contains: /.*Pattern.*/

- JavaScript Regular Expressions

----------------

Counting:

- count();

----------------

Pagination:

- skip();
- limit();

async function getPaginatedCourses() {
  const pageNumber = 2;
  const pageSize = 10;

  //api/courses?pageNumber=2&pageSize=10

  const courses = await Course.find()
    .skip((pageNumber - 1) * pageSize)
    .limit(pazeSize); //Assuming page starts from 1
}

----------------

Updating a Document - Query First:

async function updateCourse(id) {
  // Approach : Query first
  // findById()
  // Modify its properties
  // save()
  // ------------
  // Approach: Update first
  // Update directly
  // Optionally: get the updated document

  const course = await Course.findById(id);
  if (!course) return;

  course.isPublished = true;
  course.author = "Saad";

  //or use set, update only the required values to be changed

  course.set({
    isPublished: true,
    author: "Saad",
  });

  const result = await course.save();
  console.log(result);
}

updateCourse("60bdb5e9ad1f1f39872075d4");


--------------

Updating Document - Update First:

- Good for business rules
- check mongodb update operators
    - inc
    - min
    - max
    - mul
    - and so on...

- async function updateFirstCourse(id) {
  const result = await Course.updateMany(
    {
      _id: id,
    },
    {
      $set: {
        author: "Mosh",
        isPublished: false,
      },
    }
  );
  console.log(result);
}

updateFirstCourse("60bdb5e9ad1f1f39872075d4");

------------

Removing Documents:



--------------

Starting mongodb:
  - sudo systemctl start mongod
  - Compass: mongodb-compass